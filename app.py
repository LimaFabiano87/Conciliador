import streamlit as st
import pandas as pd
from motor_conciliacao import conciliar_lancamentos
from io import BytesIO
import plotly.express as px

st.set_page_config(page_title="Ferreira Lima Contabilidade Digital", page_icon="üìä", layout="wide")

# Cabe√ßalho
col1, col2 = st.columns([1, 6])
with col1:
    st.image("https://copilot.microsoft.com/th/id/BCO.ce40fb3b-b861-4175-b43b-9f5108be73e1.png", width=100)
with col2:
    st.markdown("## **Ferreira Lima Contabilidade Digital**")
    st.markdown("#### Sistema inteligente de concilia√ß√£o de notas e duplicatas")

st.markdown("---")

# Upload + gr√°fico
col_upload, col_grafico = st.columns([2, 3])
with col_upload:
    uploaded_file = st.file_uploader("üì§ Fa√ßa upload do relat√≥rio do Dom√≠nio (.xlsx)", type="xlsx")
    if uploaded_file:
        st.success("Arquivo carregado com sucesso!")

with col_grafico:
    if uploaded_file:
        relatorio = conciliar_lancamentos(uploaded_file)
        if not relatorio.empty:
            relatorio["Conciliado Manual"] = False
            relatorio["Status Final"] = relatorio["Conciliado"]  # Inicia com o status autom√°tico
            totais = relatorio["Conciliado"].value_counts().reset_index()
            totais.columns = ["Status", "Quantidade"]
            tipo_grafico = st.radio("üìà Escolha o tipo de gr√°fico", ["Barras", "Pizza"])
            if tipo_grafico == "Barras":
                fig = px.bar(totais, x="Status", y="Quantidade", color="Status", text="Quantidade",
                             color_discrete_map={"Sim": "#2ECC71", "N√£o": "#E74C3C"},
                             title="Totais Conciliados vs N√£o Conciliados")
                fig.update_layout(title_x=0.5)
                st.plotly_chart(fig, use_container_width=True)
            else:
                fig = px.pie(totais, names="Status", values="Quantidade", color="Status",
                             color_discrete_map={"Sim": "#2ECC71", "N√£o": "#E74C3C"},
                             title="Distribui√ß√£o de Concilia√ß√£o")
                fig.update_traces(textposition="inside", textinfo="percent+label")
                fig.update_layout(title_x=0.5)
                st.plotly_chart(fig, use_container_width=True)

# Filtros
if uploaded_file and not relatorio.empty:
    st.markdown("---")
    st.subheader("üéõÔ∏è Filtros")

    relatorio["M√™s"] = pd.to_datetime(relatorio["Data Pagamento"], format="%d/%m/%Y", errors="coerce").dt.to_period("M").astype(str)

    def format_mes(m):
        try:
            return pd.to_datetime(m).strftime('%B/%Y')
        except:
            return m

    confiabilidades = st.multiselect("Confiabilidade", relatorio["Confiabilidade"].unique(), default=relatorio["Confiabilidade"].unique())
    fornecedores = st.multiselect("Fornecedor", relatorio["Fornecedor"].unique(), default=relatorio["Fornecedor"].unique())
    meses = st.multiselect("M√™s", relatorio["M√™s"].unique(), default=relatorio["M√™s"].unique(), format_func=format_mes)

    mostrar_nao_conciliados_total = st.checkbox("üîç Mostrar apenas os que ainda n√£o foram conciliados (autom√°tico ou manual)", value=False)

    relatorio_filtrado = relatorio[
        (relatorio["Confiabilidade"].isin(confiabilidades)) &
        (relatorio["Fornecedor"].isin(fornecedores)) &
        (relatorio["M√™s"].isin(meses))
    ]

    if mostrar_nao_conciliados_total:
        relatorio_filtrado = relatorio_filtrado[
            (relatorio_filtrado["Status Final"] != "Conciliado")
        ]

    st.subheader("üìÑ Lan√ßamentos Importados")
    relatorio_editado = st.data_editor(
        relatorio_filtrado,
        column_config={
            "Status Final": st.column_config.SelectboxColumn(
                "Status Final",
                options=["Conciliado", "N√£o Conciliado", "Revisar"],
                help="Escolha o status final para este lan√ßamento"
            )
        },
        use_container_width=True,
        num_rows="dynamic"
    )

    st.download_button(
        label="üì• Baixar relat√≥rio por m√™s",
        data=relatorio_editado.to_csv(index=False).encode("utf-8"),
        file_name=f"relatorio_{meses[0] if meses else 'mensal'}.csv",
        mime="text/csv"
    )

    st.markdown("---")
    st.subheader("üö® Alertas Autom√°ticos")

    alertas = relatorio_editado[
        (relatorio_editado["Status Final"] != "Conciliado")
    ]

    if not alertas.empty:
        with st.expander(f"‚ö†Ô∏è {len(alertas)} lan√ßamentos marcados como n√£o conciliados ou revisar (clique para ver)", expanded=True):
            st.dataframe(alertas, use_container_width=True)
    else:
        st.success("‚úÖ Todos os lan√ßamentos foram conciliados ou revisados manualmente.")
